# ***************************************************************************
# *   Copyright (c) 2024 FreeCAD Project                                   *
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU Lesser General Public License (LGPL)    *
# *   as published by the Free Software Foundation; either version 2 of     *
# *   the License, or (at your option) any later version.                   *
# *   for detail see the LICENCE text file.                                 *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU Library General Public License for more details.                  *
# *                                                                         *
# *   You should have received a copy of the GNU Library General Public     *
# *   License along with this program; if not, write to the Free Software   *
# *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
# *   USA                                                                   *
# *                                                                         *
# ***************************************************************************

"""
Unit tests for the Drawing workbench

This test suite verifies the functionality of the C++ Drawing workbench
and demonstrates the usage of the Python API generated by AST/YAPTU.
"""

import unittest
import FreeCAD as App
import Drawing

class TestDrawingFeature(unittest.TestCase):
    """Test basic Drawing feature functionality"""
    
    def setUp(self):
        """Set up test environment"""
        self.doc = App.newDocument("TestDrawing")
    
    def tearDown(self):
        """Clean up test environment"""
        App.closeDocument(self.doc.Name)
    
    def testCreateLine(self):
        """Test line creation and properties"""
        # Create line using C++ API
        line = self.doc.addObject("Drawing::Line", "TestLine")
        
        # Test property access through Python bindings
        line.StartPoint = App.Vector(0, 0, 0)
        line.EndPoint = App.Vector(10, 5, 0)
        line.LineWidth = 2.0
        line.LineColor = (1.0, 0.0, 0.0, 0.0)  # Red
        
        # Test computed properties
        self.doc.recompute()
        
        # Verify calculated values
        self.assertAlmostEqual(line.Length, 11.18, places=2)  # sqrt(10^2 + 5^2)
        self.assertAlmostEqual(line.Angle, 26.57, places=2)   # atan2(5,10) in degrees
        
        # Test Python API
        self.assertEqual(line.TypeId, "Drawing::Line")
        self.assertTrue(hasattr(line, 'getDirection'))
    
    def testCreateCircle(self):
        """Test circle creation and properties"""
        circle = self.doc.addObject("Drawing::Circle", "TestCircle")
        
        circle.Center = App.Vector(5, 5, 0)
        circle.Radius = 3.0
        circle.FirstAngle = 0.0
        circle.LastAngle = 360.0
        
        self.doc.recompute()
        
        # Test circle properties
        self.assertEqual(circle.Center, App.Vector(5, 5, 0))
        self.assertEqual(circle.Radius, 3.0)
        self.assertTrue(circle.isFullCircle())
        
        # Test arc
        circle.LastAngle = 180.0
        self.assertFalse(circle.isFullCircle())
    
    def testCreateRectangle(self):
        """Test rectangle creation"""
        rect = self.doc.addObject("Drawing::Rectangle", "TestRect")
        
        rect.StartPoint = App.Vector(0, 0, 0)
        rect.Width = 15.0
        rect.Height = 10.0
        rect.Rounded = False
        
        self.doc.recompute()
        
        # Test calculated end point
        expected_end = App.Vector(15, 10, 0)
        self.assertEqual(rect.EndPoint, expected_end)
    
    def testCreatePolygon(self):
        """Test polygon creation"""
        poly = self.doc.addObject("Drawing::Polygon", "TestPoly")
        
        # Test point management
        points = [
            App.Vector(0, 0, 0),
            App.Vector(10, 0, 0), 
            App.Vector(10, 10, 0),
            App.Vector(0, 10, 0)
        ]
        
        poly.Points = points
        poly.Closed = True
        
        self.doc.recompute()
        
        # Test point access
        self.assertEqual(len(poly.Points), 4)
        self.assertEqual(poly.StartPoint, points[0])
        self.assertEqual(poly.EndPoint, points[-1])

class TestDrawingPythonAPI(unittest.TestCase):
    """Test the Python API functions"""
    
    def setUp(self):
        """Set up test environment"""
        self.doc = App.newDocument("TestDrawingAPI")
    
    def tearDown(self):
        """Clean up test environment"""
        App.closeDocument(self.doc.Name)
    
    def testMakeLineFunction(self):
        """Test Drawing.makeLine() function"""
        start = App.Vector(0, 0, 0)
        end = App.Vector(5, 5, 0)
        
        line = Drawing.makeLine(start, end)
        
        self.assertIsNotNone(line)
        self.assertEqual(line.TypeId, "Drawing::Line")
        self.assertEqual(line.StartPoint, start)
        self.assertEqual(line.EndPoint, end)
    
    def testMakeCircleFunction(self):
        """Test Drawing.makeCircle() function"""
        center = App.Vector(0, 0, 0)
        radius = 7.5
        
        circle = Drawing.makeCircle(center, radius)
        
        self.assertIsNotNone(circle)
        self.assertEqual(circle.TypeId, "Drawing::Circle")
        self.assertEqual(circle.Center, center)
        self.assertEqual(circle.Radius, radius)

class TestDrawingCommands(unittest.TestCase):
    """Test Drawing commands (GUI-dependent, may be skipped in headless mode)"""
    
    def setUp(self):
        """Set up test environment"""
        if not App.GuiUp:
            self.skipTest("GUI not available")
        self.doc = App.newDocument("TestDrawingCommands")
    
    def tearDown(self):
        """Clean up test environment"""
        if App.GuiUp:
            App.closeDocument(self.doc.Name)
    
    def testCommandsExist(self):
        """Test that Drawing commands are registered"""
        import FreeCADGui as Gui
        
        # Test that commands are available
        commands = [
            "Drawing_Line",
            "Drawing_Circle", 
            "Drawing_Rectangle",
            "Drawing_Polygon",
            "Drawing_Text",
            "Drawing_Dimension"
        ]
        
        for cmd in commands:
            self.assertTrue(Gui.Command.get(cmd) is not None, 
                           f"Command {cmd} should be registered")

def run_tests():
    """Run all Drawing workbench tests"""
    suite = unittest.TestSuite()
    
    # Add test cases
    suite.addTest(unittest.makeSuite(TestDrawingFeature))
    suite.addTest(unittest.makeSuite(TestDrawingPythonAPI))
    
    if App.GuiUp:
        suite.addTest(unittest.makeSuite(TestDrawingCommands))
    
    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_tests()
